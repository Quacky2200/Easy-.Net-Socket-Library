<?xml version="1.0"?>
<doc>
<assembly>
<name>
MattJamesLibrary
</name>
</assembly>
<members>
<member name="P:MattJamesLibrary.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:MattJamesLibrary.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:MattJamesLibrary.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="T:MattJamesLibrary.Core">
	<summary>
 Essential code for the library.
 </summary>
	<remarks></remarks>
</member><member name="T:MattJamesLibrary.Networking.SerializationProtocol">
	<summary>
 This protocol allow methods that deserialize and serialize object to use the same language. 
 </summary>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.Serialization.SerializeObject(System.Object)">
	<summary>
 Serialize an object into bytes using a MemoryStream and BinaryFormatter
 </summary>
	<param name="Obj">The object you want to serialize</param>
	<returns>Byte()</returns>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.Serialization.DeserializeObject(System.Byte[])">
	<summary>
 Deserialize an object from bytes using a MemoryStream and BinaryFormatter
 </summary>
	<param name="Bytes">Bytes to convert into an object</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.Serialization.SerializeObjectWithJSON(System.Object)">
	<summary>
 Serialize an object into bytes with JSON
 </summary>
	<param name="Obj">The object to convert into bytes</param>
	<returns>Byte()</returns>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.Serialization.DeserializeObjectWithJSON(System.Byte[])">
	<summary>
 Deserialize an object into bytes with JSON
 </summary>
	<param name="Bytes">Bytes to convert into an object</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="F:MattJamesLibrary.Networking.BaseTCPSocket.BaseSocket">
	<summary>
 The main socket that listens to all requests. Using the TCP protocol.
 </summary>
	<remarks>Uses AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp</remarks>
</member><member name="M:MattJamesLibrary.Networking.BaseTCPSocket.#ctor(MattJamesLibrary.Networking.SerializationProtocol,System.Int32)">
	<summary>
 Make a new TCP socket and bind it instantly.
 </summary>
	<param name="Port"></param>
	<remarks></remarks>
</member><member name="P:MattJamesLibrary.Networking.BaseTCPSocket.Port">
	<summary>
 Returns the binded port number
 </summary>
	<value>Integer</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:MattJamesLibrary.Networking.BaseTCPSocket.LocalIPEndPoint">
	<summary>
 Returns the binded IPEndPoint
 </summary>
	<value>IPEndPoint</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:MattJamesLibrary.Networking.BaseTCPSocket.Connected">
	<summary>
 Returns a boolean value if the socket's connected to a remote host
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MattJamesLibrary.Networking.BaseTCPSocket">
	<summary>
 BaseTCPSocket used for ServerTCPSocket and ClientTCPSocket
 </summary>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.Send(System.Net.Sockets.Socket,System.Object)">
	<summary>
 Send a serializable object with Protocol using a specified socket
 </summary>
	<param name="Sender">The connected socket</param>
	<param name="Obj">The object you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.Send(System.Net.IPEndPoint,System.Object)">
	<summary>
 Send a serializable object with Protocol using an IPEndPoint
 </summary>
	<param name="Sender">The IPAddress/Port (IPEndPoint) of a connected socket</param>
	<param name="Obj">The object you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.Send(System.Net.Sockets.Socket,System.Byte[])">
	<summary>
 Send data directly into a connected socket using an already serialized object in bytes
 </summary>
	<param name="Sender">The connected socket</param>
	<param name="Bytes">The data you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.Send(System.Net.IPEndPoint,System.Byte[])">
	<summary>
 Send data directly into a connected socket from an IPEndPoint, using an already serialized object in bytes
 </summary>
	<param name="Sender">The IPAddress/Port (IPEndPoint) of a connected socket</param>
	<param name="Bytes">The data you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.SendBroadcast(System.Net.IPEndPoint[],System.Byte[])">
	<summary>
 Send data directly to an array of connected sockets, using an already serialized object in bytes
 </summary>
	<param name="Sender">An array of IPAddresses/Ports (IPEndPoints) from the connected sockets dictionary</param>
	<param name="Bytes">The data you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.SendBroadcast(System.Net.IPEndPoint[],System.Object)">
	<summary>
 Send a serializable object with Protocol to an array of connected sockets
 </summary>
	<param name="Sender">An array of IPAddresses/Ports (IPEndPoints) from the connected sockets dictionary</param>
	<param name="Obj">The object you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerTCPSocket.Close">
	<summary>
 Close all connected sockets and close the main listening socket. ConnectedSockets will be cleared.
 </summary>
	<remarks></remarks>
</member><member name="T:MattJamesLibrary.Networking.ServerTCPSocket.ConnectedSocket">
	<summary>
 This class will contain a connected socket and a running thread that checks for recieved messages
 </summary>
	<remarks></remarks>
</member><member name="T:MattJamesLibrary.Networking.ServerTCPSocket">
	<summary>
 Creates a multithreaded TCP server with concurrent connections with clients. 
 </summary>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ClientTCPSocket.#ctor(MattJamesLibrary.Networking.SerializationProtocol,System.Int32)">
	<summary>
 Make a TCP client, binded to a port (if specified). Using IPAddress.Any
 </summary>
	<param name="Port">(Optional) Bind to the specified port</param>
	<remarks>See bind: http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.bind(v=vs.110).aspx 
 See IPEndPoint: http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.bind(v=vs.110).aspx 
 </remarks>
</member><member name="M:MattJamesLibrary.Networking.ClientTCPSocket.Send(System.Object)">
	<summary>
 Send a serializable object with Protocol to the connected remote host
 </summary>
	<param name="Obj">The object you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ClientTCPSocket.Send(System.Byte[])">
	<summary>
 Send a serialised object in bytes to the connected remote host
 </summary>
	<param name="Bytes">The data you intend to send</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ClientTCPSocket.Connect(System.String,System.Int32)">
	<summary>
 Try to connect to the host and port specified
 </summary>
	<param name="Host">The host you intend to try and connect to (e.g. localhost, 127.0.0.1 etc..)</param>
	<param name="Port">The port the host uses</param>
	<remarks></remarks>
</member><member name="T:MattJamesLibrary.Networking.ClientTCPSocket">
	<summary>
 A easy to use, multithreaded TCP client
 </summary>
	<remarks></remarks>
</member><member name="P:MattJamesLibrary.Networking.ServerUsingUDPClient.Port">
	<summary>
 Returns the port the UDP Server is binded to
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:MattJamesLibrary.Networking.ServerUsingUDPClient.Enabled">
	<summary>
 Returns if the Server is listening to packets and can send packets.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerUsingUDPClient.#ctor(MattJamesLibrary.Networking.SerializationProtocol,System.Int32,System.Boolean)">
	<summary>
 Make a new UDP server on the specified port.
 </summary>
	<param name="port">Port to listen on</param>
	<param name="StartListening">(Optional) Start when initialised</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerUsingUDPClient.Start">
	<summary>
 Start listening to packets
 </summary>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerUsingUDPClient.Stop">
	<summary>
 Stop listening
 </summary>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerUsingUDPClient.Send``1(``0,System.Net.IPEndPoint)">
	<summary>
 Send a serializable object with JSON to the address specified.
 </summary>
	<typeparam name="T">Any type (serializable only)</typeparam>
	<param name="Message">The object you intend to send</param>
	<param name="Address">The address to send the object to</param>
	<remarks></remarks>
</member><member name="M:MattJamesLibrary.Networking.ServerUsingUDPClient.Send(System.Byte[],System.Net.IPEndPoint)">
	<summary>
 Send a serialised object in bytes to the address specified
 </summary>
	<param name="Bytes">The data you intend to send</param>
	<param name="Address">The address the data will be sent to</param>
	<remarks></remarks>
</member>
</members>
</doc>