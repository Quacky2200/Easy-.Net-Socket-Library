<?xml version="1.0"?>
<doc>
<assembly>
<name>
MicroLibrary
</name>
</assembly>
<members>
<member name="T:MicroLibrary.Networking.Client.TcpClient">
 <summary>
 An easy to use, multithreaded TCP client
 </summary>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Client.TcpClient.#ctor(MicroLibrary.Serialization.ISerializationProtocol,System.Int32)">
 <summary>
 Make a TCP client, binded to a port (if specified). Using IPAddress.Any
 </summary>
 <param name="Port">(Optional) Bind to the specified port</param>
 <remarks>See bind: http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.bind(v=vs.110).aspx 
 See IPEndPoint: http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.bind(v=vs.110).aspx 
 </remarks>
</member>
<member name="M:MicroLibrary.Networking.Client.TcpClient.Connect(System.String,System.Int32)">
 <summary>
 Try to connect to the host and port specified
 </summary>
 <param name="Host">The host you intend to try and connect to (e.g. localhost, 127.0.0.1 etc..)</param>
 <param name="Port">The port the host uses</param>
 <remarks></remarks>
</member>
<member name="T:MicroLibrary.Networking.Server.TcpServer">
 <summary>
 Creates a multithreaded TCP server with concurrent connections with clients. 
 </summary>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.TcpServer.Send(System.Net.IPEndPoint,System.Object)">
 <summary>
 Send a serializable object with Protocol using an IPEndPoint
 </summary>
 <param name="Sender">The IPAddress/Port (IPEndPoint) of a connected socket</param>
 <param name="Obj">The object you intend to send</param>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.TcpServer.SendBroadcast(System.Net.IPEndPoint[],System.Object)">
 <summary>
 Send a serializable object with Protocol to an array of connected sockets
 </summary>
 <param name="Sender">An array of IPAddresses/Ports (IPEndPoints) from the connected sockets dictionary</param>
 <param name="Obj">The object you intend to send</param>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.TcpServer.Close">
 <summary>
 Close all connected sockets and close the main listening socket. ConnectedSockets will be cleared.
 </summary>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.Server.ServerUsingUDPClient.Port">
 <summary>
 Returns the port the UDP Server is binded to
 </summary>
 <value></value>
 <returns>Integer</returns>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.Server.ServerUsingUDPClient.Enabled">
 <summary>
 Returns if the Server is listening to packets and can send packets.
 </summary>
 <value></value>
 <returns>Boolean</returns>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.ServerUsingUDPClient.#ctor(MicroLibrary.Serialization.ISerializationProtocol,System.Int32,System.Boolean)">
 <summary>
 Make a new UDP server on the specified port.
 </summary>
 <param name="port">Port to listen on</param>
 <param name="StartListening">(Optional) Start when initialised</param>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.ServerUsingUDPClient.Start">
 <summary>
 Start listening to packets
 </summary>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.ServerUsingUDPClient.Stop">
 <summary>
 Stop listening
 </summary>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.ServerUsingUDPClient.Send``1(``0,System.Net.IPEndPoint)">
 <summary>
 Send a serializable object with JSON to the address specified.
 </summary>
 <typeparam name="T">Any type (serializable only)</typeparam>
 <param name="Message">The object you intend to send</param>
 <param name="Address">The address to send the object to</param>
 <remarks></remarks>
</member>
<member name="M:MicroLibrary.Networking.Server.ServerUsingUDPClient.Send(System.Byte[],System.Net.IPEndPoint)">
 <summary>
 Send a serialised object in bytes to the address specified
 </summary>
 <param name="Bytes">The data you intend to send</param>
 <param name="Address">The address the data will be sent to</param>
 <remarks></remarks>
</member>
<member name="T:MicroLibrary.Networking.BaseTCPSocket">
 <summary>
 BaseTCPSocket used for ServerTCPSocket and ClientTCPSocket
 </summary>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.BaseTCPSocket.PacketFailureCacheSize">
 <summary>
 How many different messages should be cached for packet failure. Recommended at around 20-40.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:MicroLibrary.Networking.BaseTCPSocket.BaseSocket">
 <summary>
 The main socket that listens to all requests. Using the TCP protocol.
 </summary>
 <remarks>Uses AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp</remarks>
</member>
<member name="M:MicroLibrary.Networking.BaseTCPSocket.#ctor(MicroLibrary.Serialization.ISerializationProtocol,System.Int32)">
 <summary>
 Make a new TCP socket and bind it instantly.
 </summary>
 <param name="Port">The port you wish to bind to</param>
 <param name="Protocol">The protocol to use for serializing and deserializing information</param>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.BaseTCPSocket.Port">
 <summary>
 Returns the binded port number
 </summary>
 <value>Integer</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.BaseTCPSocket.LocalIPEndPoint">
 <summary>
 Returns the binded IPEndPoint
 </summary>
 <value>IPEndPoint</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:MicroLibrary.Networking.BaseTCPSocket.Connected">
 <summary>
 Returns a boolean value if the socket's connected to a remote host
 </summary>
 <value>Boolean</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:MicroLibrary.Networking.ConnectedSocket">
 <summary>
 This class will contain a connected socket and a running thread that checks for recieved messages
 </summary>
 <remarks></remarks>
</member>
<member name="T:MicroLibrary.Serialization.ISerializationProtocol">
 <summary>
 This protocol allow methods that deserialize and serialize object to use the same language. 
 </summary>
 <remarks></remarks>
</member>
<member name="T:MicroLibrary.Serialization.BinaryFormatterSerializer">
 <summary>
 The Default MS BinaryFormatter Serializer Engine. It's Slow and Picky.
 </summary>
</member>
</members>
</doc>
